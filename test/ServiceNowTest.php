<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-24 at 10:33:43.
 */

// require our ServiceNow class
require_once(__DIR__."/../lib/ServiceNow.php");

/**
 * PHPUnit class to test ServiceNow class
 */
class ServiceNowTest extends PHPUnit_Framework_TestCase
{

    protected $sn;
    protected $hosts;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        // store our configuration file
        $configFile = __DIR__."/../conf/servicenow-prod.econf";

        // create our ServiceNow object
        $this->assertTrue(file_exists($configFile));
        $this->sn = new ServiceNow($configFile, true);

        // ensure that we have something in our configuration
        $this->assertNotEmpty($this->sn->__toString(), "ServiceNow configuration object is empty");
        $this->assertNotEquals("[]", $this->sn->__toString(), "ServiceNow configuration object is empty JSON string");

        // set up our hosts array
        $this->hosts = Array("stopcdvvt1.va.neustar.com", "stopcdvvt2.va.neustar.com");

    } // setUp()

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() { } // tearDown()


    /**
     * @covers ServiceNow::__toString
     */
    public function test__toString() {

        // ensure that we have something in our configuration
        $this->assertNotEmpty($this->sn->__toString(), "ServiceNow configuration object is empty");
        $this->assertNotEquals("[]", $this->sn->__toString(), "ServiceNow configuration object is empty JSON string");

    } // test__toString()

    /**
     * @covers ServiceNow::buildQuery
     */
    public function testBuildQuery() {

        # todo: add in skip / reflection class

    } // testBuildQuery()

    /**
     * @covers ServiceNow::doQuery
     */
    public function testDoQuery() {

        # todo: add in skip / reflection class

    } // testDoQuery()

    public function testGetBusinessServicesList() {

        // retrieve our business services
        $business_services = $this->sn->getBusinessServicesList();

        // ensure that we have a list
        $this->assertNotEmpty($business_services, "business_services list is empty");

    } // testGetBusinessServicesList()

    /**
     * @covers ServiceNow::getBusinessServices
     */
    public function testGetBusinessServices() {

        // retrieve our hosts
        $hosts = $this->sn->getBusinessServices($this->hosts);

        // assert that our returned hosts associative array has our hosts as keys
        $this->assertEquals($this->hosts, array_keys($hosts), "getBusinessServices did not return array with hosts as keys");

        // iterate over the array and ensure we have a business_service field
        foreach ($hosts as $host) {
            $this->assertArrayHasKey("business_service", $host, "returned host array does not have business_service key");
        } // foreach host


    } // testGetBusinessServices()

    /**
     * @covers ServiceNow::getSubsystems
     */
    public function testGetSubsystems() {

        // retrieve our hosts
        $hosts = $this->sn->getSubsystems($this->hosts);

        // assert that our returned hosts associative array has our hosts as keys
        $this->assertEquals($this->hosts, array_keys($hosts), "getSubsystems did not return array with hosts as keys");

        // iterate over the hosts and ensure we have a subsystems field
        foreach ($hosts as $host) {
            $this->assertArrayHasKey("subsystems", $host, "returned host array does not have subsystem key");
        } // foreach host


    } // testGetSubsystems()

    /**
     * @covers ServiceNow::getBusinessServices
     * @covers ServiceNow::getSubsystems
     */
    public function testGetBusinessServicesSubsystemsMerge() {

        // retrieve business services and subsystems
        $hosts1 = $this->sn->getBusinessServices($this->hosts);
        $hosts2 = $this->sn->getSubsystems($this->hosts);

        // recursively merge the arrays
        $hosts = array_merge_recursive($hosts1, $hosts2);

        // assert that our merged hosts associative array has our hosts as keys
        $this->assertEquals($this->hosts, array_keys($hosts), "getSubsystems did not return array with hosts as keys");

        // iterate over our array and ensure each hosts has a business_service and subsystem field
        foreach ($hosts as $host => $data) {
            $this->assertArrayHasKey("business_service", $data, "returned host array does not have business_service key");
            $this->assertArrayHasKey("subsystems", $data, "returned host array does not have subsystems key");
        } // foreach host

    } // testGetBusinessServicesSubsystemsMerge()

} // class ServiceNowTest
