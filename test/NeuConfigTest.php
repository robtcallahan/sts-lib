<?php

// require our NeuConfig object
require __DIR__."/../lib/NeuConfig.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-23 at 16:29:27.
 */
class NeuConfigTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var NeuConfig
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // create our NeuConfig object
        $this->config = new NeuConfig();

    } // setUp()

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    } // tearDown()

    /**
     * @covers NeuConfig::__toString
     */
    public function test__toString()
    {
        
        // define our expected json string
        $expected_json = '{"foo":"bar"}';

        // add in a value
        $this->config->foo = "bar";

        // assert that we have our expected json string
        $this->assertEquals($expected_json, $this->config->__toString(), "__toString() does not return expected JSON");
        
    } // test__toString()


    /**
     * @covers NeuConfig::__set
     * @covers NeuConfig::__get
     */
    public function test__set__get()
    {

        // set a value and retrieve it using the magic __set and __get
        $this->config->foo = "bar";
        $this->assertEquals("bar", $this->config->foo, "__set did not retrieve __get value");

    } // test__set__get()

    /**
     * @covers NeuConfig::addConfig
     */
    public function testAddConfig()
    {

        // set a value and retrieve it using the magic __set and __get
        $this->config->addConfig("foo", "bar");
        $this->assertEquals("bar", $this->config->foo, "addConfig did not set value");

    } // testAddConfig()

    /**
     * @covers NeuConfig::delConfig
     */
    public function testDelConfig()
    {

        // set a value and retrieve it using the magic __set and __get
        $this->config->addConfig("foo", "bar");
        $this->assertEquals("bar", $this->config->foo, "addConfig did not set value");

        // set a value and retrieve it using the magic __set and __get
        $this->config->delConfig("foo");
        $this->assertEquals(null, $this->config->foo, "delConfig did not remove value");

    } // testDelConfig()


    /**
     * @covers NeuConfig::writeConfig
     * @covers NeuConfig::readConfig
     * @covers NeuConfig::loadConfig
     */
    public function testWriteLoadNewConfig()
    {

        // name our test config file
        $file_name = "test.config";

        // assign a value to our config
        $this->config->foo = "bar";

        // write out our config and assert it exists
        $this->config->writeConfig($file_name);
        $this->assertTrue(file_exists($file_name), "plaintext test configuration file not written");

        // unload our config variable
        $this->config->unloadConfig();

        // read in our config file and assert foo exists
        $this->config->readConfig($file_name);
        $this->assertEquals("bar", $this->config->foo);

        // test a constructor with a file name
        $config = new NeuConfig($file_name);
        $this->assertEquals("bar", $config->foo);

        // remove our test configuration file
        unlink($file_name);

        // write out our config and assert it exists
        $this->config->writeConfig($file_name, true);
        $this->assertTrue(file_exists($file_name), "plaintext test configuration file not written");

        // unload our config variable
        $this->config->unloadConfig();

        // read in our config file and assert foo exists
        $this->config->readConfig($file_name, true);
        $this->assertEquals("bar", $this->config->foo);

        // test a constructor with a file name, encrypted
        $config = new NeuConfig($file_name, true);
        $this->assertEquals("bar", $config->foo);

        // remove our test configuration file
        unlink($file_name);

    } // testWriteConfig()

    /**
     * @covers NeuConfig::unloadConfig
     */
    public function testUnloadConfig()
    {

        // add a config value
        $this->config->foo = "bar";
        $this->assertEquals("bar", $this->config->foo, "__set did not set the value");

        // unload the configuration
        $this->config->unloadConfig();

        // check that the config is unloaded via __toString() - [] is an empty JSON object string
        $this->assertEquals("[]", $this->config->__toString(), "unloadConfig did not unload the configuration values");

    } // testUnloadConfig()

} // NeuConfigTest
