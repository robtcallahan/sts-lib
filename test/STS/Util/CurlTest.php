<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-17 at 09:59:43.
 */
class CurlTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StubCurl
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StubCurl();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * @covers STS\Util\Curl::__construct()
     * @covers STS\Util\Curl::getCh()
     */
    public function test__construct()
    {
        $this->object->__construct();
        $this->assertEquals("resource", gettype($this->object->getCh()));
    }

    /**
     * @covers STS\Util\Curl::__destruct
     * @covers STS\Util\Curl::setCookieJar
     * @covers STS\Util\Curl::getCookieJar
     */
    public function test__destruct()
    {
        $tmpFile = "/tmp/test.cookie";
        file_put_contents($tmpFile, "x");
        $this->object->setCookieJar($tmpFile);
        $this->assertFileEquals($tmpFile, $this->object->getCookieJar());
        $this->assertFileExists($this->object->getCookieJar());

        $this->object->__destruct();
        $this->assertEquals("unknown type", gettype($this->object->getCh()));
        $this->assertFileNotExists($tmpFile);
    }

    /**
     * @covers STS\Util\Curl::singleton
     */
    public function testSingleton()
    {
        $curl = \STS\Util\Curl::singleton();
        $this->assertInstanceOf('\STS\Util\Curl', $curl);
        unset($curl);
    }

    /**
     * @covers STS\Util\Curl::setUrl
     * @covers STS\Util\Curl::getUrl
     */
    public function testSetGetUrl()
    {
        $this->object->setUrl("xxx");
        $this->assertEquals("xxx", $this->object->getUrl());
    }

    /**
     * @covers STS\Util\Curl::setUserPassword
     * @covers STS\Util\Curl::getUsername
     * @covers STS\Util\Curl::getPassword
     */
    public function testSetGetUserPassword()
    {
        $this->object->setUserPassword("user", "pwd");
        $this->assertEquals("user", $this->object->getUsername());
        $this->assertEquals("pwd", $this->object->getPassword());
    }

    /**
     * @covers STS\Util\Curl::setData
     * @covers STS\Util\Curl::getData
     */
    public function testSetGetData()
    {
        $this->object->setData(array("param1" => "xxx", "param2" => "yyy"));
        $this->assertEquals("param1=xxx&param2=yyy", $this->object->getData());
    }

    /**
     * @covers STS\Util\Curl::setType
     * @covers STS\Util\Curl::getType
     */
    public function testSetGetType()
    {
        $this->object->setType("JSON");
        $this->assertEquals("JSON", $this->object->getType());
    }

    /**
     * @covers STS\Util\Curl::setVerbose
     * @covers STS\Util\Curl::getVerbose
     */
    public function testSetVerbose()
    {
        $this->object->setVerbose(true);
        $this->assertEquals(true, $this->object->getVerbose());
    }

    /**
     * @covers STS\Util\Curl::getPid
     */
    public function testGetPid()
    {
        $this->assertEquals(getmypid(), $this->object->getPid());
    }

    /**
     * @covers STS\Util\Curl::send
     * @covers STS\Util\Curl::getBody
     * @covers STS\Util\Curl::getStatus
     */
    public function testSend()
    {
        $curl = new STS\Util\Curl();
        $response = $curl->send("");
        $this->assertEquals("", $response);

        $curl->setUrl("localhost/x");
        $curl->setType("GET");
        $curl->setData("param=1");
        $curl->send();
        $this->assertTrue(preg_match('/<!DOCTYPE HTML PUBLIC "-\/\/IETF\/\/DTD HTML 2\.0\/\/EN">/', $curl->getBody()) == 1, "curl body=" . $curl->getBody());

        $curl->setType("POST");
        $curl->send();
        $this->assertTrue(preg_match('/<!DOCTYPE HTML PUBLIC "-\/\/IETF\/\/DTD HTML 2\.0\/\/EN">/', $curl->getBody()) == 1, "curl body=" . $curl->getBody());

        $this->assertEquals("404", $curl->getStatus());
    }
}
