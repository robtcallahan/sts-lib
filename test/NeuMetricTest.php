<?php

require_once __DIR__."/../lib/NeuMetric.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-27 at 14:51:51.
 */
class NeuMetricTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var NeuMetric
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // create our NeuMetric object and assert our config isn't empty
        $this->neumetric = new NeuMetric;
        $this->assertNotEquals("[]", $this->neumetric->__toString(), "NeuMetric config returned empty");

        // create our side-channel config object for testing the database
        $this->config = new NeuConfig(__DIR__."/../conf/neumetric.econf", true);

        // assert we have values
        $this->assertNotEmpty($this->config->user,  "neumetric config user is empty");
        $this->assertNotEmpty($this->config->pass,  "neumetric config pass is empty");
        $this->assertNotEmpty($this->config->table, "neumetric config table is empty");
        $this->assertNotEmpty($this->config->host,  "neumetric config host is empty");
        $this->assertNotEmpty($this->config->port,  "neumetric config port is empty");

        // create a new connection
        $this->db = new Mysqli($this->config->host, $this->config->user, $this->config->pass, $this->config->table, $this->config->port);

    } // setup

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

        // close our database connection
        $this->db->close();

    }

    /**
     * @covers NeuMetric::log
     * @todo   Implement testLog().
     */
    public function testLog()
    {

        // fabricate our PHP_AUTH_USER to satisfy NeuMetric
        $_SERVER['PHP_AUTH_USER'] = "PHPUnitTestCase";

        // insert our test log
        $this->neumetric->log('slapp', 'test');

        // side channel test to ensure that we have a test entry
        $this->db->query("SELECT * FROM neumetric.slapp WHERE user='PHPUnitTestCase' AND args = 'test'");
        $this->assertEquals(1, $this->db->affected_rows, "side channel query returned ". $this->db->affected_rows ." results, expecting 1");

        // delete our side-channel test
        $this->db->query("DELETE FROM neumetric.slapp WHERE user = 'PHPUnitTestCase' AND args = 'test'");
        $this->assertEquals(1, $this->db->affected_rows, "side channel query returned ". $this->db->affected_rows ." results, expecting 1");

    } // testLog()

}
